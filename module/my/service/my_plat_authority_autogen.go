// Code generated by tabuyos. DO NOT EDIT.

// Package service
// @author tabuyos
// @since 2023/09/15
// @description my_plat_authority
package service

import (
	"deepsea/helper"
	"deepsea/helper/database"
	"deepsea/helper/recorderx"
	"deepsea/helper/security"
	"deepsea/helper/snowflakeid"
	"deepsea/helper/validator"
	"deepsea/model/dto"
	"deepsea/model/entity"
	"deepsea/model/page"
	"deepsea/module/my/repository"
	"github.com/gin-gonic/gin"
	"time"
)

// iMyPlatAuthorityAutoGen 服务接口
type iMyPlatAuthorityAutoGen interface {
	validator.IValidator[*dto.MyPlatAuthority]
	Add(myPlatAuthority *dto.MyPlatAuthority) int64
	Remove(id int64) bool
	Modify(myPlatAuthority *dto.MyPlatAuthority) bool
	Find(id int64) *dto.MyPlatAuthority
	FindWithPage(query page.Query) *page.Result
}

// myPlatAuthorityAutoGen 服务接口
type myPlatAuthorityAutoGen struct {
	validator.AutoGenValidator[*dto.MyPlatAuthority]
	ctx *gin.Context
}

// Add 新增
func (svc *myPlatAuthorityAutoGen) Add(myPlatAuthority *dto.MyPlatAuthority) int64 {
	svc.ValidateAdd(myPlatAuthority)
	recorder := recorderx.FetchRecorder(svc.ctx)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)

	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	tenantID := security.GetTenantID(svc.ctx)
	myPlatAuthority.ID = snowflakeid.GeneratePtr()
	myPlatAuthority.TenantId = &tenantID
	myPlatAuthority.CreateAt = &now
	myPlatAuthority.CreateBy = &accountID
	myPlatAuthority.ModifyAt = &now
	myPlatAuthority.ModifyBy = &accountID
	newMyPlatAuthority := entity.NewMyPlatAuthority()
	myPlatAuthority.Into(newMyPlatAuthority)
	return rty.InsertNonNil(tx, newMyPlatAuthority)
}

// Remove 删除
func (svc *myPlatAuthorityAutoGen) Remove(id int64) bool {
	svc.ValidateRemove(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("删除 ID: %+v 的数据", id)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	return rty.DeleteByID(tx, id)
}

// Modify 修改
func (svc *myPlatAuthorityAutoGen) Modify(myPlatAuthority *dto.MyPlatAuthority) bool {
	svc.ValidateModify(myPlatAuthority)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("修改 ID: %+v 的数据", *myPlatAuthority.ID)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	myPlatAuthority.ModifyAt = &now
	myPlatAuthority.ModifyBy = &accountID
	myPlatAuthority.TenantId = nil
	newMyPlatAuthority := entity.NewMyPlatAuthority()
	myPlatAuthority.Into(newMyPlatAuthority)
	return rty.UpdateNonNilByID(tx, newMyPlatAuthority)
}

// Find 根据 ID 查询详情
func (svc *myPlatAuthorityAutoGen) Find(id int64) *dto.MyPlatAuthority {
	svc.ValidateFind(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询 ID: %+v 的数据", id)
	rty, release := repository.NewMyPlatAuthorityRty(svc.ctx)
	defer release()
	myPlatAuthority := rty.SelectByID(id)
	if myPlatAuthority == nil {
		return nil
	}
	newMyPlatAuthority := dto.NewMyPlatAuthority()
	newMyPlatAuthority.From(myPlatAuthority)
	return newMyPlatAuthority
}

// FindWithPage 分页查询
func (svc *myPlatAuthorityAutoGen) FindWithPage(query page.Query) *page.Result {
	svc.ValidateFindWithPage(query)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询分页数据 page: %+v, size: %+v", query.Page, query.Size)
	rty, release := repository.NewMyPlatAuthorityRty(svc.ctx)
	defer release()
	myPlatAuthoritys, total := rty.SelectAllWithPage(query.Page, query.Size)
	if len(myPlatAuthoritys) == 0 {
		return nil
	}
	return page.NewResult(myPlatAuthoritys, total)
}
