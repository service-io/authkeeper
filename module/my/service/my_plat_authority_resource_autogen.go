// Code generated by tabuyos. DO NOT EDIT.

// Package service
// @author tabuyos
// @since 2023/09/15
// @description my_plat_authority_resource
package service

import (
	"deepsea/helper"
	"deepsea/helper/database"
	"deepsea/helper/recorderx"
	"deepsea/helper/security"
	"deepsea/helper/snowflakeid"
	"deepsea/helper/validator"
	"deepsea/model/dto"
	"deepsea/model/entity"
	"deepsea/model/page"
	"deepsea/module/my/repository"
	"github.com/gin-gonic/gin"
	"time"
)

// iMyPlatAuthorityResourceAutoGen 服务接口
type iMyPlatAuthorityResourceAutoGen interface {
	validator.IValidator[*dto.MyPlatAuthorityResource]
	Add(myPlatAuthorityResource *dto.MyPlatAuthorityResource) int64
	Remove(id int64) bool
	Modify(myPlatAuthorityResource *dto.MyPlatAuthorityResource) bool
	Find(id int64) *dto.MyPlatAuthorityResource
	FindWithPage(query page.Query) *page.Result

	// FindAuthorityByResourceID Query Authority by Resource ID
	FindAuthorityByResourceID(int64) []*dto.MyPlatAuthority

	// FindResourceByAuthorityID Query Resource by Authority ID
	FindResourceByAuthorityID(int64) []*dto.MyPlatResource
}

// myPlatAuthorityResourceAutoGen 服务接口
type myPlatAuthorityResourceAutoGen struct {
	validator.AutoGenValidator[*dto.MyPlatAuthorityResource]
	ctx *gin.Context
}

// Add 新增
func (svc *myPlatAuthorityResourceAutoGen) Add(myPlatAuthorityResource *dto.MyPlatAuthorityResource) int64 {
	svc.ValidateAdd(myPlatAuthorityResource)
	recorder := recorderx.FetchRecorder(svc.ctx)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)

	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	tenantID := security.GetTenantID(svc.ctx)
	myPlatAuthorityResource.ID = snowflakeid.GeneratePtr()
	myPlatAuthorityResource.TenantId = &tenantID
	myPlatAuthorityResource.CreateAt = &now
	myPlatAuthorityResource.CreateBy = &accountID
	myPlatAuthorityResource.ModifyAt = &now
	myPlatAuthorityResource.ModifyBy = &accountID
	newMyPlatAuthorityResource := entity.NewMyPlatAuthorityResource()
	myPlatAuthorityResource.Into(newMyPlatAuthorityResource)
	return rty.InsertNonNil(tx, newMyPlatAuthorityResource)
}

// Remove 删除
func (svc *myPlatAuthorityResourceAutoGen) Remove(id int64) bool {
	svc.ValidateRemove(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("删除 ID: %+v 的数据", id)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	return rty.DeleteByID(tx, id)
}

// Modify 修改
func (svc *myPlatAuthorityResourceAutoGen) Modify(myPlatAuthorityResource *dto.MyPlatAuthorityResource) bool {
	svc.ValidateModify(myPlatAuthorityResource)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("修改 ID: %+v 的数据", *myPlatAuthorityResource.ID)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	myPlatAuthorityResource.ModifyAt = &now
	myPlatAuthorityResource.ModifyBy = &accountID
	myPlatAuthorityResource.TenantId = nil
	newMyPlatAuthorityResource := entity.NewMyPlatAuthorityResource()
	myPlatAuthorityResource.Into(newMyPlatAuthorityResource)
	return rty.UpdateNonNilByID(tx, newMyPlatAuthorityResource)
}

// Find 根据 ID 查询详情
func (svc *myPlatAuthorityResourceAutoGen) Find(id int64) *dto.MyPlatAuthorityResource {
	svc.ValidateFind(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询 ID: %+v 的数据", id)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	myPlatAuthorityResource := rty.SelectByID(id)
	if myPlatAuthorityResource == nil {
		return nil
	}
	newMyPlatAuthorityResource := dto.NewMyPlatAuthorityResource()
	newMyPlatAuthorityResource.From(myPlatAuthorityResource)
	return newMyPlatAuthorityResource
}

// FindWithPage 分页查询
func (svc *myPlatAuthorityResourceAutoGen) FindWithPage(query page.Query) *page.Result {
	svc.ValidateFindWithPage(query)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询分页数据 page: %+v, size: %+v", query.Page, query.Size)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	myPlatAuthorityResources, total := rty.SelectAllWithPage(query.Page, query.Size)
	if len(myPlatAuthorityResources) == 0 {
		return nil
	}
	return page.NewResult(myPlatAuthorityResources, total)
}

// FindAuthorityByResourceID 根据 Resource ID 查询Authority详情
func (svc *myPlatAuthorityResourceAutoGen) FindAuthorityByResourceID(id int64) []*dto.MyPlatAuthority {
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询 Resource ID: %+v 的数据", id)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	ets := rty.SelectAuthorityByResourceID(id)
	if ets == nil {
		return nil
	}
	values := make([]*dto.MyPlatAuthority, len(ets))
	for i, eto := range ets {
		value := dto.NewMyPlatAuthority()
		value.From(eto)
		values[i] = value
	}
	return values
}

// FindResourceByAuthorityID 根据 Authority ID 查询Resource详情
func (svc *myPlatAuthorityResourceAutoGen) FindResourceByAuthorityID(id int64) []*dto.MyPlatResource {
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询 Authority ID: %+v 的数据", id)
	rty, release := repository.NewMyPlatAuthorityResourceRty(svc.ctx)
	defer release()
	ets := rty.SelectResourceByAuthorityID(id)
	if ets == nil {
		return nil
	}
	values := make([]*dto.MyPlatResource, len(ets))
	for i, eto := range ets {
		value := dto.NewMyPlatResource()
		value.From(eto)
		values[i] = value
	}
	return values
}
