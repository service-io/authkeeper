// Code generated by tabuyos. DO NOT EDIT.

// Package service
// @author tabuyos
// @since 2023/09/15
// @description my_plat_role
package service

import (
	"deepsea/helper"
	"deepsea/helper/database"
	"deepsea/helper/recorderx"
	"deepsea/helper/security"
	"deepsea/helper/snowflakeid"
	"deepsea/helper/validator"
	"deepsea/model/dto"
	"deepsea/model/entity"
	"deepsea/model/page"
	"deepsea/module/my/repository"
	"github.com/gin-gonic/gin"
	"time"
)

// iMyPlatRoleAutoGen 服务接口
type iMyPlatRoleAutoGen interface {
	validator.IValidator[*dto.MyPlatRole]
	Add(myPlatRole *dto.MyPlatRole) int64
	Remove(id int64) bool
	Modify(myPlatRole *dto.MyPlatRole) bool
	Find(id int64) *dto.MyPlatRole
	FindWithPage(query page.Query) *page.Result
}

// myPlatRoleAutoGen 服务接口
type myPlatRoleAutoGen struct {
	validator.AutoGenValidator[*dto.MyPlatRole]
	ctx *gin.Context
}

// Add 新增
func (svc *myPlatRoleAutoGen) Add(myPlatRole *dto.MyPlatRole) int64 {
	svc.ValidateAdd(myPlatRole)
	recorder := recorderx.FetchRecorder(svc.ctx)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatRoleRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)

	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	tenantID := security.GetTenantID(svc.ctx)
	myPlatRole.ID = snowflakeid.GeneratePtr()
	myPlatRole.TenantId = &tenantID
	myPlatRole.CreateAt = &now
	myPlatRole.CreateBy = &accountID
	myPlatRole.ModifyAt = &now
	myPlatRole.ModifyBy = &accountID
	newMyPlatRole := entity.NewMyPlatRole()
	myPlatRole.Into(newMyPlatRole)
	return rty.InsertNonNil(tx, newMyPlatRole)
}

// Remove 删除
func (svc *myPlatRoleAutoGen) Remove(id int64) bool {
	svc.ValidateRemove(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("删除 ID: %+v 的数据", id)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatRoleRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	return rty.DeleteByID(tx, id)
}

// Modify 修改
func (svc *myPlatRoleAutoGen) Modify(myPlatRole *dto.MyPlatRole) bool {
	svc.ValidateModify(myPlatRole)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("修改 ID: %+v 的数据", *myPlatRole.ID)
	errorHandler := helper.ErrToLog(recorder)
	rty, release := repository.NewMyPlatRoleRty(svc.ctx)
	defer release()
	tx, err := database.FetchDB().Begin()
	errorHandler(err)
	defer helper.HandleTx(tx, errorHandler)
	now := time.Now()
	accountID := security.GetAccountID(svc.ctx)
	myPlatRole.ModifyAt = &now
	myPlatRole.ModifyBy = &accountID
	myPlatRole.TenantId = nil
	newMyPlatRole := entity.NewMyPlatRole()
	myPlatRole.Into(newMyPlatRole)
	return rty.UpdateNonNilByID(tx, newMyPlatRole)
}

// Find 根据 ID 查询详情
func (svc *myPlatRoleAutoGen) Find(id int64) *dto.MyPlatRole {
	svc.ValidateFind(id)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询 ID: %+v 的数据", id)
	rty, release := repository.NewMyPlatRoleRty(svc.ctx)
	defer release()
	myPlatRole := rty.SelectByID(id)
	if myPlatRole == nil {
		return nil
	}
	newMyPlatRole := dto.NewMyPlatRole()
	newMyPlatRole.From(myPlatRole)
	return newMyPlatRole
}

// FindWithPage 分页查询
func (svc *myPlatRoleAutoGen) FindWithPage(query page.Query) *page.Result {
	svc.ValidateFindWithPage(query)
	recorder := recorderx.FetchRecorder(svc.ctx)
	recorder.Infof("查询分页数据 page: %+v, size: %+v", query.Page, query.Size)
	rty, release := repository.NewMyPlatRoleRty(svc.ctx)
	defer release()
	myPlatRoles, total := rty.SelectAllWithPage(query.Page, query.Size)
	if len(myPlatRoles) == 0 {
		return nil
	}
	return page.NewResult(myPlatRoles, total)
}
