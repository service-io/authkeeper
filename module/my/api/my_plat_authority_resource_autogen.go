// Code generated by tabuyos. DO NOT EDIT.

// Package api
// @author tabuyos
// @since 2023/09/15
// @description my_plat_authority_resource
package api

import (
	"deepsea/helper/recorderx"
	"deepsea/model/dto"
	"deepsea/model/page"
	"deepsea/model/reply"
	"deepsea/module/my/service"
	"github.com/gin-gonic/gin"
	"net/http"
	"strconv"
)

// MyPlatAuthorityResourceHandler API 处理器
type MyPlatAuthorityResourceHandler struct{}

// NewMyPlatAuthorityResourceHandler 创建 API 处理器
func NewMyPlatAuthorityResourceHandler() *MyPlatAuthorityResourceHandler {
	return &MyPlatAuthorityResourceHandler{}
}

// Add 新增数据
// @Summary      新增数据
// @Description  新增数据
// @Tags         my,MyPlatAuthorityResource
// @Accept       json
// @Produce      json
// @Param        req_info    body     dto.MyPlatAuthorityResource  true  "待新增的数据对象"
// @Success      200  {object}  reply.Reply  "操作结果"
// @Security     ApiKeyAuth
// @Router       /my/authority-resource/add [put]
func (*MyPlatAuthorityResourceHandler) Add() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		recorder := recorderx.FetchRecorder(ctx)
		newMyPlatAuthorityResource := dto.NewMyPlatAuthorityResource()
		err := ctx.ShouldBindJSON(newMyPlatAuthorityResource)
		recorder.MaybePanic(err)
		svc, release := service.NewMyPlatAuthorityResourceSvc(ctx)
		defer release()
		id := svc.Add(newMyPlatAuthorityResource)
		if id != 0 {
			ctx.JSON(http.StatusOK, reply.OkPayload(id))
		} else {
			ctx.JSON(http.StatusOK, reply.FailedMessage("新增失败"))
		}
	}
}

// Remove 根据 ID 删除数据
// @Summary      删除数据
// @Description  根据 ID 删除数据
// @Tags         my,MyPlatAuthorityResource
// @Accept       json
// @Produce      json
// @Param        id    query     integer  true  "待删除 ID"
// @Success      200  {object}  reply.Reply  "操作结果"
// @Security     ApiKeyAuth
// @Router       /my/authority-resource/remove [delete]
func (*MyPlatAuthorityResourceHandler) Remove() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		recorder := recorderx.FetchRecorder(ctx)
		id, err := strconv.ParseInt(ctx.Query("id"), 10, 64)
		recorder.MaybePanic(err)
		if id <= 0 {
			ctx.JSON(http.StatusOK, reply.FailedMessage("请传递正确的 ID"))
			return
		}
		svc, release := service.NewMyPlatAuthorityResourceSvc(ctx)
		defer release()
		op := svc.Remove(id)
		if op {
			ctx.JSON(http.StatusOK, reply.Ok().WithState(op).WithMessage("操作成功"))
			return
		}
		ctx.JSON(http.StatusOK, reply.Failed().WithState(op).WithMessage("操作失败"))
	}
}

// Modify 根据 ID 修改数据
// @Summary      修改数据
// @Description  根据 ID 修改数据
// @Tags         my,MyPlatAuthorityResource
// @Accept       json
// @Produce      json
// @Param        req_info    body     dto.MyPlatAuthorityResource  true  "待修改的数据对象"
// @Success      200  {object}  reply.Reply  "操作结果"
// @Security     ApiKeyAuth
// @Router       /my/authority-resource/base-modify [post]
func (*MyPlatAuthorityResourceHandler) Modify() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		recorder := recorderx.FetchRecorder(ctx)
		newMyPlatAuthorityResource := dto.NewMyPlatAuthorityResource()
		err := ctx.ShouldBindJSON(newMyPlatAuthorityResource)
		recorder.MaybePanic(err)
		if newMyPlatAuthorityResource.ID == nil {
			ctx.JSON(http.StatusOK, reply.FailedMessage("请传递正确的 ID, 以及需要修改的信息"))
			return
		}
		svc, release := service.NewMyPlatAuthorityResourceSvc(ctx)
		defer release()
		op := svc.Modify(newMyPlatAuthorityResource)
		if op {
			ctx.JSON(http.StatusOK, reply.OkMessage("操作成功"))
			return
		}
		ctx.JSON(http.StatusOK, reply.FailedMessage("操作失败"))
	}
}

// Detail 根据 ID 获取详情
// @Summary      获取详情
// @Description  根据 ID 获取详情
// @Tags         my,MyPlatAuthorityResource
// @Accept       json
// @Produce      json
// @Param        id    query     integer  true  "查询 ID"
// @Success      200  {object}  reply.Reply{payload=dto.MyPlatAuthorityResource}  "查询详情"
// @Security     ApiKeyAuth
// @Router       /my/authority-resource/detail [get]
func (*MyPlatAuthorityResourceHandler) Detail() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		recorder := recorderx.FetchRecorder(ctx)
		id, err := strconv.ParseInt(ctx.Query("id"), 10, 64)
		recorder.MaybePanic(err)
		if id <= 0 {
			ctx.JSON(http.StatusOK, reply.FailedMessage("请传递正确的 ID"))
			return
		}
		svc, release := service.NewMyPlatAuthorityResourceSvc(ctx)
		defer release()
		myPlatAuthorityResource := svc.Find(id)
		if myPlatAuthorityResource != nil {
			ctx.JSON(http.StatusOK, reply.OkPayload(myPlatAuthorityResource))
			return
		}
		ctx.JSON(http.StatusOK, reply.Failed().WithMessage("无对应数据"))
	}
}

// ListPage 分页列表
// @Summary      分页列表
// @Description  获取分页列表
// @Tags         my,MyPlatAuthorityResource
// @Accept       json
// @Produce      json
// @Param        req_info    body     page.Query  false  "分页信息"
// @Success      200  {object}  reply.Reply{payload=[]page.Result}  "分页列表"
// @Security     ApiKeyAuth
// @Router       /my/authority-resource/list-page [post]
func (*MyPlatAuthorityResourceHandler) ListPage() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		recorder := recorderx.FetchRecorder(ctx)
		query := page.NewQuery()
		query.Page = 1
		query.Size = 20
		err := ctx.ShouldBindJSON(query)
		recorder.MaybePanic(err)
		svc, release := service.NewMyPlatAuthorityResourceSvc(ctx)
		defer release()
		ctx.JSON(http.StatusOK, reply.OkPayload(svc.FindWithPage(*query)))
	}
}
