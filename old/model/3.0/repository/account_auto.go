package repository

import jen "github.com/dave/jennifer/jen"

func genDeclAt109() jen.Code {
	return jen.Null()
}
func genDeclAt327() jen.Code {
	return jen.Null().Type().Id("iAccountAutoGen").Interface(jen.Id("SelectOneByConfig").Params(jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Op("*").Id("entity").Dot("Account")), jen.Id("SelectManyByConfig").Params(jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Index().Op("*").Id("entity").Dot("Account")), jen.Id("SelectPageByConfig").Params(jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Index().Op("*").Id("entity").Dot("Account"), jen.Id("int64")), jen.Id("InsertByConfig").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")), jen.Id("UpdateByConfig").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")), jen.Id("DeleteByConfig").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")), jen.Id("SelectByID").Params(jen.Id("int64")).Params(jen.Op("*").Id("entity").Dot("Account")), jen.Id("SelectByIDs").Params(jen.Op("...").Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")), jen.Id("BatchSelectByID").Params(jen.Index().Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")), jen.Id("SelectByXXXID").Params(jen.Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")), jen.Id("SelectByXXXStr").Params(jen.Id("string")).Params(jen.Index().Op("*").Id("entity").Dot("Account")), jen.Id("SelectAllWithPage").Params(jen.Id("int64"), jen.Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account"), jen.Id("int64")), jen.Id("Insert").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account")).Params(jen.Id("int64")), jen.Id("InsertNonNil").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account")).Params(jen.Id("int64")), jen.Id("InsertWithFunc").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account"), jen.Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("int64")), jen.Id("BatchInsert").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Index().Op("*").Id("entity").Dot("Account")).Params(jen.Index().Id("int64")), jen.Id("BatchInsertNonNil").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Index().Op("*").Id("entity").Dot("Account")).Params(jen.Index().Id("int64")), jen.Id("BatchInsertWithFunc").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Index().Op("*").Id("entity").Dot("Account"), jen.Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Index().Id("int64")), jen.Id("DeleteByID").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Id("int64")).Params(jen.Id("bool")), jen.Id("DeleteByIDs").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("...").Id("int64")).Params(jen.Id("bool")), jen.Id("BatchDeleteByID").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Index().Id("int64")).Params(jen.Id("bool")), jen.Id("UpdateByID").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account")).Params(jen.Id("bool")), jen.Id("UpdateNonNilByID").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account")).Params(jen.Id("bool")), jen.Id("UpdateByIDWithFunc").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Op("*").Id("entity").Dot("Account"), jen.Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("bool")), jen.Id("BatchUpdateByIDWithFunc").Params(jen.Op("*").Qual("database/sql", "Tx"), jen.Index().Op("*").Id("entity").Dot("Account"), jen.Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("bool")))
}
func genDeclAt4029() jen.Code {
	return jen.Null().Type().Id("accountAutoGen").Struct()
}
func genFuncSelectOneByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectOneByConfig").Params(jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Op("*").Id("entity").Dot("Account")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().Id("nil")), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().Id("nil")), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.Id("db").Op(":=").Id("database").Dot("FetchDB").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("db").Dot("Prepare").Call(jen.Id("execSQL")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Id("row").Op(":=").Id("stmt").Dot("QueryRowContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("account").Op(":=").Qual("metis/helper", "Row").Call(jen.Id("row"), jen.Func().Params().Params(jen.Op("*").Id("entity").Dot("Account"), jen.Index().Id("any")).Block(jen.Id("account").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("mappers").Op(":=").Id("evalInfo").Dot("MapperRows").Call(jen.Id("account")), jen.Return().List(jen.Id("account"), jen.Id("mappers")))), jen.Return().Id("account"))
}
func genFuncSelectManyByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectManyByConfig").Params(jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Index().Op("*").Id("entity").Dot("Account")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().Id("nil")), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().Id("nil")), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.Id("db").Op(":=").Id("database").Dot("FetchDB").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("db").Dot("Prepare").Call(jen.Id("execSQL")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.List(jen.Id("rows"), jen.Id("err")).Op(":=").Id("stmt").Dot("QueryContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Id("accounts").Op(":=").Qual("metis/helper", "Rows").Call(jen.Id("rows"), jen.Func().Params().Params(jen.Op("*").Id("entity").Dot("Account"), jen.Index().Id("any")).Block(jen.Id("account").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("mappers").Op(":=").Id("evalInfo").Dot("MapperRows").Call(jen.Id("account")), jen.Return().List(jen.Id("account"), jen.Id("mappers")))), jen.Return().Id("accounts"))
}
func genFuncSelectPageByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectPageByConfig").Params(jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Index().Op("*").Id("entity").Dot("Account"), jen.Id("int64")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().List(jen.Id("nil"), jen.Lit(0))), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().List(jen.Id("nil"), jen.Lit(0))), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.List(jen.Id("tx"), jen.Id("err")).Op(":=").Id("database").Dot("FetchDB").Call().Dot("Begin").Call(), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Defer().Qual("metis/helper", "HandleTx").Call(jen.Id("tx"), jen.Id("recorder").Dot("MaybePanic")), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("tx").Dot("Prepare").Call(jen.Id("execSQL")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.List(jen.Id("rows"), jen.Id("err")).Op(":=").Id("stmt").Dot("QueryContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Id("accounts").Op(":=").Qual("metis/helper", "Rows").Call(jen.Id("rows"), jen.Func().Params().Params(jen.Op("*").Id("entity").Dot("Account"), jen.Index().Id("any")).Block(jen.Id("account").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("mappers").Op(":=").Id("evalInfo").Dot("MapperRows").Call(jen.Id("account")), jen.Return().List(jen.Id("account"), jen.Id("mappers")))), jen.If(jen.Id("evalInfo").Dot("Pageable").Call()).Block(jen.Id("totalSQL").Op(":=").Id("evalInfo").Dot("TotalSQL").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("tx").Dot("Prepare").Call(jen.Id("totalSQL")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Id("row").Op(":=").Id("stmt").Dot("QueryRowContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("total").Op(":=").Qual("metis/helper", "Row").Call(jen.Id("row"), jen.Func().Params().Params(jen.Op("*").Op("*").Id("int64"), jen.Index().Id("any")).Block(jen.Null().Var().Id("r").Op("*").Id("int64"), jen.Null().Var().Id("cs").Op("=").Index().Id("any").Values(jen.Op("&").Id("r")), jen.Return().List(jen.Op("&").Id("r"), jen.Id("cs")))), jen.If(jen.Op("*").Id("total").Op("==").Id("nil")).Block(jen.Return().List(jen.Id("accounts"), jen.Lit(0))), jen.Return().List(jen.Id("accounts"), jen.Op("*").Op("*").Id("total"))), jen.Return().List(jen.Id("accounts"), jen.Lit(0)))
}
func genFuncInsertByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("InsertByConfig").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.Id("self").Op(":=").Id("config").Dot("Self").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("tx").Dot("Prepare").Call(jen.Id("execSQL")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.List(jen.Id("result"), jen.Id("err")).Op(":=").Id("stmt").Dot("ExecContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.If(jen.Id("self").Dot("ID").Op("!=").Id("nil")).Block(jen.Return().Id("true")), jen.List(jen.Id("id"), jen.Id("err")).Op(":=").Id("result").Dot("LastInsertId").Call(), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.If(jen.Id("id").Op("==").Lit(0)).Block(jen.Id("panic").Call(jen.Lit("插入失败"))), jen.Id("self").Dot("ID").Op("=").Op("&").Id("id"), jen.Return().Id("true"))
}
func genFuncUpdateByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("UpdateByConfig").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("tx").Dot("Prepare").Call(jen.Id("execSQL")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.List(jen.Id("result"), jen.Id("err")).Op(":=").Id("stmt").Dot("ExecContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.List(jen.Id("_"), jen.Id("err")).Op("=").Id("result").Dot("RowsAffected").Call(), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Return().Id("true"))
}
func genFuncDeleteByConfig() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("DeleteByConfig").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("config").Id("iris").Dot("ConfigService").Index(jen.Id("entity").Dot("Account"))).Params(jen.Id("bool")).Block(jen.If(jen.Id("config").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("evaluator").Op(":=").Id("config").Dot("Evaluator").Call(), jen.If(jen.Id("evaluator").Op("!=").Id("nil")).Block(jen.Return().Id("false")), jen.Id("recorder").Op(":=").Id("recorderx").Dot("DefaultRecorder").Call(), jen.Id("evalInfo").Op(":=").Id("evaluator").Dot("EvalInfo").Call(), jen.Id("execSQL").Op(":=").Id("evalInfo").Dot("SQL").Call(), jen.Id("values").Op(":=").Id("evalInfo").Dot("Values").Call(), jen.List(jen.Id("stmt"), jen.Id("err")).Op(":=").Id("tx").Dot("Prepare").Call(jen.Id("execSQL")), jen.Defer().Qual("metis/helper", "DeferClose").Call(jen.Id("stmt"), jen.Id("recorder").Dot("MaybePanic")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.List(jen.Id("result"), jen.Id("err")).Op(":=").Id("stmt").Dot("ExecContext").Call(jen.Id("ag").Dot("getDbCtx").Call(), jen.Id("values").Op("...")), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.List(jen.Id("_"), jen.Id("err")).Op("=").Id("result").Dot("RowsAffected").Call(), jen.Id("recorder").Dot("MaybePanic").Call(jen.Id("err")), jen.Return().Id("true"))
}
func genFuncSelectByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectByID").Params(jen.Id("id").Id("int64")).Params(jen.Op("*").Id("entity").Dot("Account")).Block(jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Select").Call(jen.Id("config").Dot("Asterisk").Call().Op("...")).Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Where").Call(jen.Id("config").Dot("IDCol").Call().Dot("EQ").Call(jen.Id("id"))).Dot("Eval").Call())), jen.Return().Id("ag").Dot("SelectOneByConfig").Call(jen.Id("config")))
}
func genFuncSelectByIDs() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectByIDs").Params(jen.Id("ids").Op("...").Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")).Block(jen.Return().Id("ag").Dot("BatchSelectByID").Call(jen.Id("ids")))
}
func genFuncBatchSelectByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchSelectByID").Params(jen.Id("ids").Index().Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")).Block(jen.Id("values").Op(":=").Id("make").Call(jen.Index().Id("any"), jen.Id("len").Call(jen.Id("ids"))), jen.For(jen.List(jen.Id("i"), jen.Id("id")).Op(":=").Range().Id("ids")).Block(jen.Id("values").Index(jen.Id("i")).Op("=").Id("id")), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Select").Call(jen.Id("config").Dot("Asterisk").Call().Op("...")).Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Where").Call(jen.Id("config").Dot("IDCol").Call().Dot("IN").Call(jen.Id("values").Op("..."))).Dot("Eval").Call())), jen.Return().Id("ag").Dot("SelectManyByConfig").Call(jen.Id("config")))
}
func genFuncSelectByXXXID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectByXXXID").Params(jen.Id("xxxID").Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account")).Block(jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Select").Call(jen.Id("config").Dot("Asterisk").Call().Op("...")).Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Where").Call(jen.Id("config").Dot("IDCol").Call().Dot("EQ").Call(jen.Id("xxxID"))).Dot("Eval").Call())), jen.Return().Id("ag").Dot("SelectManyByConfig").Call(jen.Id("config")))
}
func genFuncSelectByXXXStr() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectByXXXStr").Params(jen.Id("str").Id("string")).Params(jen.Index().Op("*").Id("entity").Dot("Account")).Block(jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Select").Call(jen.Id("config").Dot("Asterisk").Call().Op("...")).Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Where").Call(jen.Id("config").Dot("IDCol").Call().Dot("Like").Call(jen.Id("str"))).Dot("Eval").Call())), jen.Return().Id("ag").Dot("SelectManyByConfig").Call(jen.Id("config")))
}
func genFuncSelectAllWithPage() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("SelectAllWithPage").Params(jen.Id("page").Id("int64"), jen.Id("size").Id("int64")).Params(jen.Index().Op("*").Id("entity").Dot("Account"), jen.Id("int64")).Block(jen.If(jen.Id("page").Op("<").Lit(1)).Block(jen.Return().List(jen.Id("nil"), jen.Lit(0))), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Select").Call(jen.Id("config").Dot("Asterisk").Call().Op("...")).Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Page").Call(jen.Id("size"), jen.Parens(jen.Id("page").Op("-").Lit(1)).Op("*").Id("size")).Dot("Eval").Call())), jen.Return().Id("ag").Dot("SelectPageByConfig").Call(jen.Id("config")))
}
func genFuncInsert() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("Insert").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account")).Params(jen.Id("int64")).Block(jen.Return().Id("ag").Dot("InsertWithFunc").Call(jen.Id("tx"), jen.Id("account"), jen.Func().Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool")).Block(jen.Return().Id("true"))))
}
func genFuncInsertNonNil() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("InsertNonNil").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account")).Params(jen.Id("int64")).Block(jen.Return().Id("ag").Dot("InsertWithFunc").Call(jen.Id("tx"), jen.Id("account"), jen.Func().Params(jen.Id("c").Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("v").Id("any")).Params(jen.Id("bool")).Block(jen.Return().Qual("metis/helper", "IsNonNil").Call(jen.Id("v")))))
}
func genFuncInsertWithFunc() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("InsertWithFunc").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account"), jen.Id("fn").Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("int64")).Block(jen.If(jen.Id("account").Dot("Evaluator").Call().Op("!=").Id("nil")).Block(jen.Id("ag").Dot("InsertByConfig").Call(jen.Id("tx"), jen.Id("account")), jen.Return().Op("*").Id("account").Dot("ID")), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.List(jen.Id("selfishs"), jen.Id("values")).Op(":=").Id("account").Dot("ColumnAndValue").Call(jen.Id("fn")), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Insert").Call(jen.Id("selfishs").Op("...")).Dot("Insert").Call(jen.Id("config").Dot("Table").Call()).Dot("Values").Call(jen.Id("values").Op("...")).Dot("Eval").Call())), jen.Id("ag").Dot("InsertByConfig").Call(jen.Id("tx"), jen.Id("config")), jen.Return().Op("*").Id("config").Dot("ID"))
}
func genFuncBatchInsert() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchInsert").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("accounts").Index().Op("*").Id("entity").Dot("Account")).Params(jen.Index().Id("int64")).Block(jen.Return().Id("ag").Dot("BatchInsertWithFunc").Call(jen.Id("tx"), jen.Id("accounts"), jen.Func().Params(jen.Id("c").Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("v").Id("any")).Params(jen.Id("bool")).Block(jen.Return().Id("true"))))
}
func genFuncBatchInsertNonNil() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchInsertNonNil").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("accounts").Index().Op("*").Id("entity").Dot("Account")).Params(jen.Index().Id("int64")).Block(jen.Return().Id("ag").Dot("BatchInsertWithFunc").Call(jen.Id("tx"), jen.Id("accounts"), jen.Func().Params(jen.Id("c").Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("v").Id("any")).Params(jen.Id("bool")).Block(jen.Return().Qual("metis/helper", "IsNonNil").Call(jen.Id("v")))))
}
func genFuncBatchInsertWithFunc() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchInsertWithFunc").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("accounts").Index().Op("*").Id("entity").Dot("Account"), jen.Id("fn").Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Index().Id("int64")).Block(jen.If(jen.Id("len").Call(jen.Id("accounts")).Op("==").Lit(0)).Block(jen.Return().Id("nil")), jen.Id("account").Op(":=").Id("accounts").Index(jen.Lit(0)), jen.Id("ids").Op(":=").Id("make").Call(jen.Index().Id("int64"), jen.Id("len").Call(jen.Id("accounts"))), jen.For(jen.List(jen.Id("i"), jen.Id("e")).Op(":=").Range().Id("accounts")).Block(jen.Id("ids").Index(jen.Id("i")).Op("=").Op("*").Id("e").Dot("ID")), jen.If(jen.Id("account").Dot("Evaluator").Call().Op("!=").Id("nil")).Block(jen.Id("ag").Dot("InsertByConfig").Call(jen.Id("tx"), jen.Id("account")), jen.Return().Id("ids")), jen.Id("values").Op(":=").Id("make").Call(jen.Index().Id("any"), jen.Lit(0)), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.List(jen.Id("selfishs"), jen.Id("_")).Op(":=").Id("account").Dot("ColumnAndValue").Call(jen.Id("fn")), jen.For(jen.List(jen.Id("_"), jen.Id("e")).Op(":=").Range().Id("accounts")).Block(jen.List(jen.Id("_"), jen.Id("snipValues")).Op(":=").Id("e").Dot("ColumnAndValue").Call(jen.Id("fn")), jen.Id("values").Op("=").Id("append").Call(jen.Id("values"), jen.Id("snipValues").Op("..."))), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Insert").Call(jen.Id("selfishs").Op("...")).Dot("Insert").Call(jen.Id("config").Dot("Table").Call()).Dot("Values").Call(jen.Id("values").Op("...")).Dot("Eval").Call())), jen.Id("ag").Dot("InsertByConfig").Call(jen.Id("tx"), jen.Id("config")), jen.Return().Id("ids"))
}
func genFuncDeleteByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("DeleteByID").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("id").Id("int64")).Params(jen.Id("bool")).Block(jen.Return().Id("ag").Dot("DeleteByIDs").Call(jen.Id("tx"), jen.Id("id")))
}
func genFuncDeleteByIDs() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("DeleteByIDs").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("ids").Op("...").Id("int64")).Params(jen.Id("bool")).Block(jen.Return().Id("ag").Dot("BatchDeleteByID").Call(jen.Id("tx"), jen.Id("ids")))
}
func genFuncBatchDeleteByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchDeleteByID").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("ids").Index().Id("int64")).Params(jen.Id("bool")).Block(jen.Id("values").Op(":=").Id("make").Call(jen.Index().Id("any"), jen.Id("len").Call(jen.Id("ids"))), jen.For(jen.List(jen.Id("i"), jen.Id("id")).Op(":=").Range().Id("ids")).Block(jen.Id("values").Index(jen.Id("i")).Op("=").Id("id")), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("Delete").Call().Dot("From").Call(jen.Id("config").Dot("Table").Call()).Dot("Where").Call(jen.Id("config").Dot("IDCol").Call().Dot("IN").Call(jen.Id("values").Op("..."))).Dot("Eval").Call())), jen.Return().Id("ag").Dot("DeleteByConfig").Call(jen.Id("tx"), jen.Id("config")))
}
func genFuncUpdateByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("UpdateByID").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account")).Params(jen.Id("bool")).Block(jen.Return().Id("ag").Dot("UpdateByIDWithFunc").Call(jen.Id("tx"), jen.Id("account"), jen.Func().Params(jen.Id("c").Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("v").Id("any")).Params(jen.Id("bool")).Block(jen.Return().Id("true"))))
}
func genFuncUpdateNonNilByID() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("UpdateNonNilByID").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account")).Params(jen.Id("bool")).Block(jen.Return().Id("ag").Dot("UpdateByIDWithFunc").Call(jen.Id("tx"), jen.Id("account"), jen.Func().Params(jen.Id("c").Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("v").Id("any")).Params(jen.Id("bool")).Block(jen.Return().Qual("metis/helper", "IsNonNil").Call(jen.Id("v")))))
}
func genFuncUpdateByIDWithFunc() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("UpdateByIDWithFunc").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("account").Op("*").Id("entity").Dot("Account"), jen.Id("fn").Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("bool")).Block(jen.If(jen.Id("account").Dot("Evaluator").Call().Op("!=").Id("nil")).Block(jen.Return().Id("ag").Dot("UpdateByConfig").Call(jen.Id("tx"), jen.Id("account"))), jen.Id("config").Op(":=").Id("entity").Dot("NewAccount").Call(), jen.List(jen.Id("selfishs"), jen.Id("values")).Op(":=").Id("account").Dot("ColumnAndValue").Call(jen.Id("fn")), jen.Id("config").Dot("Configure").Call(jen.Func().Params(jen.Id("eval").Op("*").Id("iris").Dot("Evaluator").Index(jen.Id("entity").Dot("Account"))).Block(jen.Id("eval").Dot("UpdateRef").Call(jen.Id("config").Dot("Table").Call(), jen.Id("selfishs").Op("...")).Dot("SetValues").Call(jen.Id("values").Op("...")).Dot("Eval").Call())), jen.Return().Id("ag").Dot("UpdateByConfig").Call(jen.Id("tx"), jen.Id("config")))
}
func genFuncBatchUpdateByIDWithFunc() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("BatchUpdateByIDWithFunc").Params(jen.Id("tx").Op("*").Qual("database/sql", "Tx"), jen.Id("accounts").Index().Op("*").Id("entity").Dot("Account"), jen.Id("fn").Params(jen.Op("*").Id("iris").Dot("Column").Index(jen.Id("entity").Dot("Account")), jen.Id("any")).Params(jen.Id("bool"))).Params(jen.Id("bool")).Block(jen.For(jen.List(jen.Id("_"), jen.Id("account")).Op(":=").Range().Id("accounts")).Block(jen.Id("ag").Dot("UpdateByIDWithFunc").Call(jen.Id("tx"), jen.Id("account"), jen.Id("fn"))), jen.Return().Id("true"))
}
func genFuncgetDBCtx() jen.Code {
	return jen.Func().Params(jen.Id("ag").Op("*").Id("accountAutoGen")).Id("getDBCtx").Params().Params(jen.Qual("context", "Context")).Block(jen.Return().Qual("context", "Background").Call())
}
func genDeclAt14855() jen.Code {
	return jen.Null().Var().Id("_").Id("iAccountAutoGen").Op("=").Parens(jen.Op("*").Id("accountAutoGen")).Call(jen.Id("nil"))
}
func genFile() *jen.File {
	ret := jen.NewFile("repository")
	ret.Add(genDeclAt109())
	ret.Add(genDeclAt327())
	ret.Add(genDeclAt4029())
	ret.Add(genFuncSelectOneByConfig())
	ret.Add(genFuncSelectManyByConfig())
	ret.Add(genFuncSelectPageByConfig())
	ret.Add(genFuncInsertByConfig())
	ret.Add(genFuncUpdateByConfig())
	ret.Add(genFuncDeleteByConfig())
	ret.Add(genFuncSelectByID())
	ret.Add(genFuncSelectByIDs())
	ret.Add(genFuncBatchSelectByID())
	ret.Add(genFuncSelectByXXXID())
	ret.Add(genFuncSelectByXXXStr())
	ret.Add(genFuncSelectAllWithPage())
	ret.Add(genFuncInsert())
	ret.Add(genFuncInsertNonNil())
	ret.Add(genFuncInsertWithFunc())
	ret.Add(genFuncBatchInsert())
	ret.Add(genFuncBatchInsertNonNil())
	ret.Add(genFuncBatchInsertWithFunc())
	ret.Add(genFuncDeleteByID())
	ret.Add(genFuncDeleteByIDs())
	ret.Add(genFuncBatchDeleteByID())
	ret.Add(genFuncUpdateByID())
	ret.Add(genFuncUpdateNonNilByID())
	ret.Add(genFuncUpdateByIDWithFunc())
	ret.Add(genFuncBatchUpdateByIDWithFunc())
	ret.Add(genFuncgetDBCtx())
	ret.Add(genDeclAt14855())
	return ret
}
