package dto

import (
	"deepsea/generated/helper"
	"fmt"
	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"time"
)

type autogen struct {
	option *helper.Option
}

func New(option *helper.Option) helper.AutoGenService {
	return &autogen{option: option}
}

func (ag *autogen) RenderAuto() {
	file := jen.NewFile("dto")
	helper.ImportPkg(ag.option.Module, file)

	file.HeaderComment("Code generated by tabuyos. DO NOT EDIT.")
	file.PackageComment("Package dto")
	file.PackageComment("@author tabuyos")
	file.PackageComment("@since " + time.Now().Format("2006/01/02"))
	file.PackageComment("@description " + ag.option.Table)

	file.Add(ag.GenStructDto())
	file.Add(ag.GenFuncNew())
	file.Add(ag.GenFuncFrom())
	file.Add(ag.GenFuncInto())

	helper.WriteToFile(file, fmt.Sprintf("%s/%s_autogen.go", ag.option.Package.Dto, ag.option.Table), false)
}

func (ag *autogen) RenderSelf() {
	file := jen.NewFile("dto")
	helper.ImportPkg(ag.option.Module, file)

	file.PackageComment("Package dto")
	file.PackageComment("@author tabuyos")
	file.PackageComment("@since " + time.Now().Format("2006/01/02"))
	file.PackageComment("@description " + ag.option.Table)

	helper.WriteToFile(file, fmt.Sprintf("%s/%s.go", ag.option.Package.Dto, ag.option.Table), true)
}

func (ag *autogen) RenderBoth() {
	ag.RenderAuto()
	ag.RenderSelf()
}

func (ag *autogen) GenStructDto() jen.Code {
	return jen.Line().Comment(fmt.Sprintf("%s 自动生成", ag.option.Entity)).Line().Type().Id(ag.option.Entity).Add(helper.UseEntity(ag.option.Entity))
}

func (ag *autogen) GenFuncNew() jen.Code {
	return jen.Line().Comment(fmt.Sprintf("New%s 初始化", ag.option.Entity)).Line().Func().Id(fmt.Sprintf("New%s", ag.option.Entity)).Params().Params(jen.Op("*").Id(ag.option.Entity)).Block(
		jen.Return(jen.Op("&").Id(ag.option.Entity).Values()),
	)
}

func (ag *autogen) GenFuncFrom() jen.Code {
	var codes []jen.Code
	for _, column := range ag.option.Cols {
		codes = append(codes, jen.Add(
			helper.RenderField("rec", strcase.ToCamel(column.ColumnName)),
		).Op("=").Add(helper.RenderField("from", strcase.ToCamel(column.ColumnName))))
	}
	return jen.Line().Comment("From 读取 entity").Line().Func().Params(jen.Id("rec").Op("*").Id(ag.option.Entity)).Id("From").
		Params(jen.Id("from").Op("*").Add(helper.UseEntity(ag.option.Entity))).
		Params().Block(codes...)
}

func (ag *autogen) GenFuncInto() jen.Code {
	var codes []jen.Code
	for _, column := range ag.option.Cols {
		codes = append(codes, jen.Add(helper.RenderField("into", strcase.ToCamel(column.ColumnName))).Op("=").
			Add(helper.RenderField("rec", strcase.ToCamel(column.ColumnName))))
	}
	return jen.Line().Comment("Into 写入 entity").Line().Func().Params(jen.Id("rec").Op("*").Id(ag.option.Entity)).Id("Into").
		Params(jen.Id("into").Op("*").Add(helper.UseEntity(ag.option.Entity))).
		Params().Block(codes...)
}
