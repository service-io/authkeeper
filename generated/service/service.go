package service

import (
	"deepsea/generated/helper"
	"fmt"
	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"time"
)

type autogen struct {
	option *helper.Option
}

func New(option *helper.Option) helper.AutoGenService {
	return &autogen{option: option}
}

func (ag *autogen) RenderAuto() {
	file := jen.NewFile("service")
	helper.ImportPkg(ag.option.Module, file)

	file.HeaderComment("Code generated by tabuyos. DO NOT EDIT.")
	file.PackageComment("Package service")
	file.PackageComment("@author tabuyos")
	file.PackageComment("@since " + time.Now().Format("2006/01/02"))
	file.PackageComment("@description " + ag.option.Table)

	file.Add(ag.GenInterfaceAutoGen())
	file.Add(ag.GenStructAutoGen())
	file.Add(ag.GenFuncAdd())
	file.Add(ag.GenFuncRemove())
	file.Add(ag.GenFuncModify())
	file.Add(ag.GenFuncFind())
	file.Add(ag.GenFuncFindWithPage())

	helper.WriteToFile(file, fmt.Sprintf("%s/%s_autogen.go", ag.option.Package.Svc, ag.option.Table), false)
}

func (ag *autogen) RenderSelf() {
	file := jen.NewFile("service")
	helper.ImportPkg(ag.option.Module, file)

	file.PackageComment("Package service")
	file.PackageComment("@author tabuyos")
	file.PackageComment("@since " + time.Now().Format("2006/01/02"))
	file.PackageComment("@description " + ag.option.Table)

	file.Add(ag.GenVarPool())
	file.Add(ag.GenInterfaceSvc())
	file.Add(ag.GenStructSvc())
	file.Add(ag.GenFuncNewSvc())

	helper.WriteToFile(file, fmt.Sprintf("%s/%s.go", ag.option.Package.Svc, ag.option.Table), true)
}

func (ag *autogen) RenderBoth() {
	ag.RenderAuto()
	ag.RenderSelf()
}

func (ag *autogen) GenInterfaceAutoGen() jen.Code {
	return jen.Line().Comment(fmt.Sprintf("i%sAutoGen 服务接口", ag.option.Entity)).Line().Type().Id(fmt.Sprintf("i%sAutoGen", ag.option.Entity)).Interface(
		helper.UseValidatorIValidator(ag.option.Entity),
		jen.Id("Add").
			Params(jen.Id(ag.option.LowerCamel).Op("*").Add(helper.UseDto(ag.option.Entity))).
			Params(jen.Id("int64")),
		jen.Id("Remove").
			Params(jen.Id("id").Id("int64")).
			Params(jen.Id("bool")),
		jen.Id("Modify").
			Params(jen.Id(ag.option.LowerCamel).Op("*").Add(helper.UseDto(ag.option.Entity))).
			Params(jen.Id("bool")),
		jen.Id("Find").
			Params(jen.Id("id").Id("int64")).
			Params(jen.Op("*").Add(helper.UseDto(ag.option.Entity))),
		jen.Id("FindWithPage").
			Params(jen.Id("query").Add(helper.UsePage("Query"))).
			Params(jen.Op("*").Add(helper.UsePage("Result"))))
}

func (ag *autogen) GenStructAutoGen() jen.Code {
	return jen.Line().Comment(fmt.Sprintf("%sAutoGen 服务接口", ag.option.LowerCamel)).Line().Type().Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel)).Struct(
		helper.UseValidatorAutoGenValidator(ag.option.Entity),
		jen.Id("ctx").Op("*").Add(helper.UseGinCtx()),
	)
}

func (ag *autogen) fillTreeInfo() jen.Code {
	if helper.HasColumn(helper.TnKey, ag.option.Cols) {
		o := fmt.Sprintf("new%s", ag.option.Entity)
		tnf := strcase.ToCamel(helper.TnKey)
		tn := strcase.ToLowerCamel(helper.TnKey)
		ll := strcase.ToCamel(helper.LlKey)
		l := strcase.ToCamel(helper.LKey)
		r := strcase.ToCamel(helper.RKey)
		return jen.If(jen.Id(o).Dot(tnf).Op("==").Nil()).Block(
			jen.Id(tn).Op(":=").Id("rty").Dot("SelectMaxTreeNo").Call(),
			jen.Id(o).Dot(tnf).Op("=").Add(helper.UseHelper("ToPtr")).Call(jen.Id(tn).Op("+").Lit(1)),
			jen.Id(o).Dot(ll).Op("=").Add(helper.UseHelper("ToPtr")).Call(jen.Lit(1)),
			jen.Id(o).Dot(l).Op("=").Add(helper.UseHelper("ToPtr")).Call(jen.Lit(1)),
			jen.Id(o).Dot(r).Op("=").Add(helper.UseHelper("ToPtr")).Call(jen.Lit(2)),
		)
	}
	return jen.Null()
}

func (ag *autogen) easeTreeInfo() []jen.Code {
	var codes []jen.Code
	if helper.HasColumn(helper.TnKey, ag.option.Cols) {
		o := fmt.Sprintf("new%s", ag.option.Entity)
		tn := strcase.ToCamel(helper.TnKey)
		ll := strcase.ToCamel(helper.LlKey)
		l := strcase.ToCamel(helper.LKey)
		r := strcase.ToCamel(helper.RKey)
		return append(codes,
			jen.Id(o).Dot(tn).Op("=").Nil(),
			jen.Id(o).Dot(ll).Op("=").Nil(),
			jen.Id(o).Dot(l).Op("=").Nil(),
			jen.Id(o).Dot(r).Op("=").Nil(),
		)
	}
	return append(codes, jen.Null())
}

func (ag *autogen) GenFuncAdd() jen.Code {
	var codes []jen.Code

	codes = append(codes,
		helper.UseSvcValidateAdd(ag.option.LowerCamel),
		jen.Id("recorder").Op(":=").Add(helper.UseFetchRecorder()).Call(jen.Id("svc").Dot("ctx")),
		jen.Id("errorHandler").Op(":=").Add(helper.UseHelper("ErrToLog")).Call(jen.Id("recorder")),
		jen.List(jen.Id("rty"),
			jen.Id("release")).Op(":=").Add(helper.UseRepository(ag.option.Module, "New"+ag.option.Entity+"Rty")).Call(jen.Id("svc").Dot("ctx")),
		jen.Defer().Id("release").Call(),
		jen.List(jen.Id("tx"),
			jen.Id("err")).Op(":=").Add(helper.UseDatabase("FetchDB")).Call().Dot("Begin").Call(),
		jen.Id("errorHandler").Call(jen.Id("err")),
		jen.Defer().Add(helper.UseHelper("HandleTx")).Call(jen.Id("tx"), jen.Id("errorHandler")),
		jen.Line(),
		helper.InferCode(helper.HasColumn(helper.MaKey, ag.option.Cols), jen.Id("now").Op(":=").Qual("time", "Now").Call()),
		helper.InferCode(helper.HasColumn(helper.MbKey, ag.option.Cols), jen.Id("accountID").Op(":=").Add(helper.UseSecurity("GetAccountID")).Call(jen.Id("svc").Dot("ctx"))),
		helper.InferCode(helper.HasColumn(helper.TtKey, ag.option.Cols), jen.Id("tenantID").Op(":=").Add(helper.UseSecurity("GetTenantID")).Call(jen.Id("svc").Dot("ctx"))),
	)

	codes = append(codes, helper.InferCode(helper.HasColumn(helper.PwdKey, ag.option.Cols), helper.GetPwdCode(ag.option.LowerCamel)))

	if helper.HasColumn(helper.PKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.PKey)).Op("=").Add(helper.UseSnowflakeidToGenPtr()).Call())
	}

	if helper.HasColumn(helper.TtKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.TtKey)).Op("=").Op("&").Id("tenantID"))
	}

	if helper.HasColumn(helper.CaKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.CaKey)).Op("=").Op("&").Id("now"))
	}

	if helper.HasColumn(helper.CbKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.CbKey)).Op("=").Op("&").Id("accountID"))
	}

	if helper.HasColumn(helper.MaKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.MaKey)).Op("=").Op("&").Id("now"))
	}

	if helper.HasColumn(helper.MbKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.MbKey)).Op("=").Op("&").Id("accountID"))
	}

	codes = append(codes,
		jen.Id("new"+ag.option.Entity).Op(":=").Add(helper.UseEntity("New"+ag.option.Entity)).Call(),
		jen.Id(ag.option.LowerCamel).Dot("Into").Call(jen.Id("new"+ag.option.Entity)),
		ag.fillTreeInfo(),
		jen.Return().Id("rty").Dot("InsertNonNil").Call(jen.Id("tx"), jen.Id("new"+ag.option.Entity)),
	)

	return jen.Line().Comment("Add 新增").Line().Func().
		Params(jen.Id("svc").Op("*").Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel))).Id("Add").
		Params(jen.Id(ag.option.LowerCamel).Op("*").Add(helper.UseDto(ag.option.Entity))).
		Params(jen.Id("int64")).Block(codes...)
}

func (ag *autogen) GenFuncRemove() jen.Code {
	return jen.Line().Comment("Remove 删除").Line().Func().
		Params(jen.Id("svc").Op("*").Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel))).Id("Remove").
		Params(jen.Id("id").Id("int64")).
		Params(jen.Id("bool")).Block(
		helper.UseSvcValidateRemove(),
		jen.Id("recorder").Op(":=").Add(helper.UseFetchRecorder()).Call(jen.Id("svc").Dot("ctx")),
		jen.Id("recorder").Dot("Infof").Call(
			jen.Lit("删除 ID: %+v 的数据"),
			jen.Id("id"),
		),
		jen.Id("errorHandler").Op(":=").Add(helper.UseHelper("ErrToLog")).Call(jen.Id("recorder")),
		jen.List(jen.Id("rty"),
			jen.Id("release")).Op(":=").Add(helper.UseRepository(ag.option.Module, "New"+ag.option.Entity+"Rty")).Call(jen.Id("svc").Dot("ctx")),
		jen.Defer().Id("release").Call(),
		jen.List(jen.Id("tx"),
			jen.Id("err")).Op(":=").Add(helper.UseDatabase("FetchDB")).Call().Dot("Begin").Call(),
		jen.Id("errorHandler").Call(jen.Id("err")),
		jen.Defer().Add(helper.UseHelper("HandleTx")).Call(jen.Id("tx"),
			jen.Id("errorHandler")),
		jen.Return().Id("rty").Dot("DeleteByID").Call(jen.Id("tx"),
			jen.Id("id")))
}

func (ag *autogen) GenFuncModify() jen.Code {
	var codes []jen.Code
	codes = append(codes,
		helper.UseSvcValidateModify(ag.option.LowerCamel),
		jen.Id("recorder").Op(":=").Add(helper.UseFetchRecorder()).Call(jen.Id("svc").Dot("ctx")),
		jen.Id("recorder").Dot("Infof").Call(
			jen.Lit("修改 ID: %+v 的数据"),
			helper.RenderStarField(ag.option.LowerCamel, strcase.ToCamel(helper.PKey)),
		),
		jen.Id("errorHandler").Op(":=").Add(helper.UseHelper("ErrToLog")).Call(jen.Id("recorder")),
		jen.List(jen.Id("rty"),
			jen.Id("release")).Op(":=").Add(helper.UseRepository(ag.option.Module, "New"+ag.option.Entity+"Rty")).Call(jen.Id("svc").Dot("ctx")),
		jen.Defer().Id("release").Call(),
		jen.List(jen.Id("tx"),
			jen.Id("err")).Op(":=").Add(helper.UseDatabase("FetchDB")).Call().Dot("Begin").Call(),
		jen.Id("errorHandler").Call(jen.Id("err")),
		jen.Defer().Add(helper.UseHelper("HandleTx")).Call(jen.Id("tx"),
			jen.Id("errorHandler")),
		helper.InferCode(helper.HasColumn(helper.MaKey, ag.option.Cols), jen.Id("now").Op(":=").Qual("time", "Now").Call()),
		helper.InferCode(helper.HasColumn(helper.MbKey, ag.option.Cols), jen.Id("accountID").Op(":=").Add(helper.UseSecurity("GetAccountID")).Call(jen.Id("svc").Dot("ctx"))),
	)

	codes = append(codes, helper.InferCode(helper.HasColumn(helper.PwdKey, ag.option.Cols), helper.GetPwdCode(ag.option.LowerCamel)))

	if helper.HasColumn(helper.MaKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.MaKey)).Op("=").Op("&").Id("now"))
	}

	if helper.HasColumn(helper.MbKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.MbKey)).Op("=").Op("&").Id("accountID"))
	}

	if helper.HasColumn(helper.TtKey, ag.option.Cols) {
		codes = append(codes, jen.Id(ag.option.LowerCamel).Dot(strcase.ToCamel(helper.TtKey)).Op("=").Nil())
	}

	codes = append(codes, jen.Id("new"+ag.option.Entity).Op(":=").Add(helper.UseEntity("New"+ag.option.Entity)).Call(),
		jen.Id(ag.option.LowerCamel).Dot("Into").Call(jen.Id("new"+ag.option.Entity)))
	codes = append(codes, ag.easeTreeInfo()...)
	codes = append(codes, jen.Return().Id("rty").Dot("UpdateNonNilByID").Call(jen.Id("tx"), jen.Id("new"+ag.option.Entity)))

	return jen.Line().Comment("Modify 修改").Line().Func().
		Params(jen.Id("svc").Op("*").Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel))).Id("Modify").
		Params(jen.Id(ag.option.LowerCamel).Op("*").Add(helper.UseDto(ag.option.Entity))).
		Params(jen.Id("bool")).Block(codes...)
}

func (ag *autogen) GenFuncFind() jen.Code {
	return jen.Line().Comment("Find 根据 ID 查询详情").Line().Func().
		Params(jen.Id("svc").Op("*").Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel))).Id("Find").
		Params(jen.Id("id").Id("int64")).
		Params(jen.Op("*").Add(helper.UseDto(ag.option.Entity))).Block(
		helper.UseSvcValidateFind(),
		jen.Id("recorder").Op(":=").Add(helper.UseFetchRecorder()).Call(jen.Id("svc").Dot("ctx")),
		jen.Id("recorder").Dot("Infof").Call(
			jen.Lit("查询 ID: %+v 的数据"),
			jen.Id("id"),
		),
		jen.List(jen.Id("rty"), jen.Id("release")).Op(":=").Add(helper.UseRepository(ag.option.Module, "New"+ag.option.Entity+"Rty")).Call(jen.Id("svc").Dot("ctx")),
		jen.Defer().Id("release").Call(),
		jen.Id(ag.option.LowerCamel).Op(":=").Id("rty").Dot("SelectByID").Call(jen.Id("id")),
		jen.If(jen.Id(ag.option.LowerCamel).Op("==").Nil()).Block(jen.Return(jen.Nil())),
		helper.IsAccountTable(ag.option.Table, jen.Id(ag.option.LowerCamel)),
		jen.Id("new"+ag.option.Entity).Op(":=").Add(helper.UseDto("New"+ag.option.Entity)).Call(),
		jen.Id("new"+ag.option.Entity).Dot("From").Call(jen.Id(ag.option.LowerCamel)),
		jen.Return().Id("new"+ag.option.Entity),
	)
}

func (ag *autogen) GenFuncFindWithPage() jen.Code {
	return jen.Line().Comment("FindWithPage 分页查询").Line().Func().
		Params(jen.Id("svc").Op("*").Id(fmt.Sprintf("%sAutoGen", ag.option.LowerCamel))).Id("FindWithPage").
		Params(jen.Id("query").Id("page").Dot("Query")).
		Params(jen.Op("*").Id("page").Dot("Result")).Block(
		helper.UseSvcValidateFindWithPage(),
		jen.Id("recorder").Op(":=").Add(helper.UseFetchRecorder()).Call(jen.Id("svc").Dot("ctx")),
		jen.Id("recorder").Dot("Infof").Call(
			jen.Lit("查询分页数据 page: %+v, size: %+v"),
			jen.Id("query").Dot("Page"),
			jen.Id("query").Dot("Size"),
		),
		jen.List(jen.Id("rty"),
			jen.Id("release")).Op(":=").Add(helper.UseRepository(ag.option.Module, "New"+ag.option.Entity+"Rty")).Call(jen.Id("svc").Dot("ctx")),
		jen.Defer().Id("release").Call(),
		jen.List(jen.Id(ag.option.LowerCamel+"s"), jen.Id("total")).Op(":=").Id("rty").Dot("SelectAllWithPage").Call(jen.Id("query").Dot("Page"), jen.Id("query").Dot("Size")),
		jen.If(jen.Id("len").Call(jen.Id(ag.option.LowerCamel+"s")).Op("==").Lit(0)).Block(jen.Return().Id("nil")),
		helper.IsAccountTable(ag.option.Table, jen.Id(ag.option.LowerCamel+"s").Op("...")),
		jen.Return().Id("page").Dot("NewResult").Call(jen.Id(ag.option.LowerCamel+"s"), jen.Id("total")),
	)
}

func (ag *autogen) GenVarPool() jen.Code {
	return jen.Line().Comment(ag.option.LowerCamel + "SvcPool 服务池").Line().Var().Id(ag.option.LowerCamel + "SvcPool").Op("=").Op("&").Add(helper.UseSync("Pool")).
		Values(jen.Id("New").Op(":").
			Func().
			Params().
			Params(jen.Interface()).
			Block(jen.Return().Id("new").Call(jen.Id(ag.option.LowerCamel + "Svc"))))
}

func (ag *autogen) GenInterfaceSvc() jen.Code {
	return jen.Line().Comment(ag.option.Entity + "Svc 服务接口").Line().Type().Id(ag.option.Entity + "Svc").Interface(jen.Id("i" + ag.option.Entity + "AutoGen"))
}

func (ag *autogen) GenStructSvc() jen.Code {
	return jen.Line().Comment(ag.option.LowerCamel + "Svc 服务结构体").Line().Type().Id(ag.option.LowerCamel + "Svc").Struct(jen.Id(ag.option.LowerCamel + "AutoGen"))
}

func (ag *autogen) GenFuncNewSvc() jen.Code {
	return jen.Line().Comment(fmt.Sprintf("New%sSvc 从池中创建服务", ag.option.Entity)).Line().
		Func().Id(fmt.Sprintf("New%sSvc", ag.option.Entity)).Params(jen.Id("ctx").Op("*").Add(helper.UseGin("Context"))).
		Params(jen.Id(fmt.Sprintf("%sSvc", ag.option.Entity)), jen.Func().Params()).
		Block(jen.Id("svc").Op(":=").Id(fmt.Sprintf("%sSvcPool", ag.option.LowerCamel)).Dot("Get").Call().
			Assert(jen.Op("*").Id(fmt.Sprintf("%sSvc", ag.option.LowerCamel))),
			jen.Id("svc").Dot("ctx").Op("=").Id("ctx"),
			jen.Id("rel").Op(":=").Func().Params().Block(jen.Id("svc").Dot("ctx").Op("=").Id("nil"),
				jen.Id(fmt.Sprintf("%sSvcPool", ag.option.LowerCamel)).Dot("Put").Call(jen.Id("svc"))),
			jen.Return().List(jen.Id("svc"),
				jen.Id("rel")))
}
